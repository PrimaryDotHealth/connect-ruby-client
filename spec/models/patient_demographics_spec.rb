=begin
#Primary Connect API V1

#Client Library to interface with Primary Connect

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for PrimaryConnectClient::PatientDemographics
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe PrimaryConnectClient::PatientDemographics do
  let(:instance) { PrimaryConnectClient::PatientDemographics.new }

  describe 'test an instance of PatientDemographics' do
    it 'should create an instance of PatientDemographics' do
      expect(instance).to be_instance_of(PrimaryConnectClient::PatientDemographics)
    end
  end
  describe 'test attribute "name"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "dob"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "ssn"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "sex"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["SEX_UNKNOWN", "SEX_FEMALE", "SEX_MALE", "SEX_OTHER", "SEX_NON_BINARY", "SEX_PREFER_NOT_TO_DISCLOSE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sex = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "gender"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["GENDER_UNKNOWN", "GENDER_FEMALE", "GENDER_MALE", "GENDER_OTHER", "GENDER_NON_BINARY", "GENDER_TRANSGENDER_MALE", "GENDER_TRANSGENDER_FEMALE", "GENDER_PREFER_NOT_TO_DISCLOSE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.gender = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sexual_orientation"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["ORIENTATION_UNKNOWN", "ORIENTATION_HOMOSEXUAL", "ORIENTATION_HETEROSEXUAL", "ORIENTATION_BISEXUAL", "ORIENTATION_QUESTIONING", "ORIENTATION_OTHER", "ORIENTATION_PREFER_NOT_TO_DISCLOSE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sexual_orientation = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "races"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('Array<String>', ["RACE_UNKNOWN", "RACE_AMERICAN_INDIAN_OR_ALASKA_NATIVE", "RACE_ASIAN", "RACE_BLACK_OR_AFRICAN_AMERICAN", "RACE_NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER", "RACE_OTHER", "RACE_WHITE", "RACE_PREFER_NOT_TO_DISCLOSE", "RACE_MIDDLE_EASTERN_OR_NORTH_AFRICAN", "RACE_SOUTH_OR_CENTRAL_AMERICAN_INDIAN"])
      # validator.allowable_values.each do |value|
      #   expect { instance.races = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "race_details"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('Array<String>', ["RACE_DETAIL_UNKNOWN", "RACE_DETAIL_ASIAN_INDIAN", "RACE_DETAIL_CHINESE", "RACE_DETAIL_CAMBODIAN", "RACE_DETAIL_FILIPINO", "RACE_DETAIL_JAPANESE", "RACE_DETAIL_KOREAN", "RACE_DETAIL_LAOTIAN", "RACE_DETAIL_VIETNAMESE", "RACE_DETAIL_OTHER_ASIAN", "RACE_DETAIL_NATIVE_HAWAIIAN", "RACE_DETAIL_GUAMIAN_OR_CHAMORRO", "RACE_DETAIL_SAMOAN", "RACE_DETAIL_OTHER_PACIFIC_ISLANDER", "RACE_DETAIL_PREFER_NOT_TO_DISCLOSE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.race_details = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ethnicity"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["ETHNICITY_UNKNOWN", "ETHNICITY_HISPANIC", "ETHNICITY_NON_HISPANIC", "ETHNICITY_PREFER_NOT_TO_DISCLOSE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ethnicity = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ethnicity_detail"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('Array<String>', ["ETHNICITY_DETAIL_UNKNOWN", "ETHNICITY_DETAIL_MEXICAN", "ETHNICITY_DETAIL_PUERTO_RICAN", "ETHNICITY_DETAIL_CUBAN", "ETHNICITY_DETAIL_OTHER", "ETHNICITY_DETAIL_PREFER_NOT_TO_DISCLOSE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ethnicity_detail = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "marital_status"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["MARITAL_STATUS_UNKNOWN", "MARITAL_STATUS_SEPARATED", "MARITAL_STATUS_UNMARRIED", "MARITAL_STATUS_COMMON_LAW", "MARITAL_STATUS_DIVORCED", "MARITAL_STATUS_LEGALLY_SEPARATED", "MARITAL_STATUS_LIVING_TOGETHER", "MARITAL_STATUS_INTERLOCUTORY", "MARITAL_STATUS_MARRIED", "MARITAL_STATUS_ANNULLED", "MARITAL_STATUS_OTHER", "MARITAL_STATUS_DOMESTIC_PARTNER", "MARITAL_STATUS_REGISTERED_DOMESTIC_PARTNER", "MARITAL_STATUS_SINGLE", "MARITAL_STATUS_UNREPORTED", "MARITAL_STATUS_WIDOWED"])
      # validator.allowable_values.each do |value|
      #   expect { instance.marital_status = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "is_deceased"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "death_date_time"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "phone_numbers"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "email_addresses"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "language_code"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "citizenships"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "address"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
