=begin
#Primary Connect API V1

#Client Library to interface with Primary Connect

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'date'
require 'time'

module PrimaryConnectClient
  class OrderOrder
    # ID of the order assigned by the placing system
    attr_accessor :id

    # ID assigned by the application fulfilling the order
    attr_accessor :application_order_id

    # The status of an order.
    attr_accessor :status

    # Timestamp when the order was placed (ISO-8601)
    attr_accessor :transaction_date_time

    # Timestamp when the specimen was collected (ISO-8601)
    attr_accessor :collection_date_time

    # Timestamp when the specimen was collected (ISO-8601)
    attr_accessor :collection_start_date_time

    # Timestamp when the results were composed into a report and released. (ISO-8601)
    attr_accessor :completion_date_time

    # YYYY-MM-DD, Date when the order becomes invalid
    attr_accessor :expiration_date

    attr_accessor :specimen

    # Array of medications administered to the subject
    attr_accessor :medication_administrations

    attr_accessor :procedure

    attr_accessor :ordering_provider

    # Array of providers to be copied on the results
    attr_accessor :result_copy_providers

    attr_accessor :ordering_facility

    # Priority of the order
    attr_accessor :priority

    # List of diagnoses associated with this order
    attr_accessor :diagnoses

    # Clinically relevant comments regarding the order
    attr_accessor :clinical_comments

    # Order-level notes
    attr_accessor :notes

    # List of supplementary clinical information associated with the order. Often these are answers to Ask at Order Entry (AOE) questions.
    attr_accessor :clinical_info

    # Current overall status of the order
    attr_accessor :results_status

    # Specificity of the response requested from the receiving system
    attr_accessor :response_flag

    attr_accessor :external_ids

    # List of result components
    attr_accessor :results

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'application_order_id' => :'applicationOrderId',
        :'status' => :'status',
        :'transaction_date_time' => :'transactionDateTime',
        :'collection_date_time' => :'collectionDateTime',
        :'collection_start_date_time' => :'collectionStartDateTime',
        :'completion_date_time' => :'completionDateTime',
        :'expiration_date' => :'expirationDate',
        :'specimen' => :'specimen',
        :'medication_administrations' => :'medicationAdministrations',
        :'procedure' => :'procedure',
        :'ordering_provider' => :'orderingProvider',
        :'result_copy_providers' => :'resultCopyProviders',
        :'ordering_facility' => :'orderingFacility',
        :'priority' => :'priority',
        :'diagnoses' => :'diagnoses',
        :'clinical_comments' => :'clinicalComments',
        :'notes' => :'notes',
        :'clinical_info' => :'clinicalInfo',
        :'results_status' => :'resultsStatus',
        :'response_flag' => :'responseFlag',
        :'external_ids' => :'externalIds',
        :'results' => :'results'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'application_order_id' => :'String',
        :'status' => :'String',
        :'transaction_date_time' => :'Time',
        :'collection_date_time' => :'Time',
        :'collection_start_date_time' => :'Time',
        :'completion_date_time' => :'Time',
        :'expiration_date' => :'String',
        :'specimen' => :'Specimen',
        :'medication_administrations' => :'Array<MedicationAdministration>',
        :'procedure' => :'CodedValue',
        :'ordering_provider' => :'Provider',
        :'result_copy_providers' => :'Array<Provider>',
        :'ordering_facility' => :'OrderOrderOrderingFacility',
        :'priority' => :'String',
        :'diagnoses' => :'Array<OrderOrderDiagnoses>',
        :'clinical_comments' => :'String',
        :'notes' => :'Array<String>',
        :'clinical_info' => :'Array<OrderOrderClinicalInfo>',
        :'results_status' => :'String',
        :'response_flag' => :'String',
        :'external_ids' => :'Array<Identifier>',
        :'results' => :'Array<Result>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PrimaryConnectClient::OrderOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PrimaryConnectClient::OrderOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'application_order_id')
        self.application_order_id = attributes[:'application_order_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'transaction_date_time')
        self.transaction_date_time = attributes[:'transaction_date_time']
      end

      if attributes.key?(:'collection_date_time')
        self.collection_date_time = attributes[:'collection_date_time']
      end

      if attributes.key?(:'collection_start_date_time')
        self.collection_start_date_time = attributes[:'collection_start_date_time']
      end

      if attributes.key?(:'completion_date_time')
        self.completion_date_time = attributes[:'completion_date_time']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'specimen')
        self.specimen = attributes[:'specimen']
      end

      if attributes.key?(:'medication_administrations')
        if (value = attributes[:'medication_administrations']).is_a?(Array)
          self.medication_administrations = value
        end
      end

      if attributes.key?(:'procedure')
        self.procedure = attributes[:'procedure']
      end

      if attributes.key?(:'ordering_provider')
        self.ordering_provider = attributes[:'ordering_provider']
      end

      if attributes.key?(:'result_copy_providers')
        if (value = attributes[:'result_copy_providers']).is_a?(Array)
          self.result_copy_providers = value
        end
      end

      if attributes.key?(:'ordering_facility')
        self.ordering_facility = attributes[:'ordering_facility']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'diagnoses')
        if (value = attributes[:'diagnoses']).is_a?(Array)
          self.diagnoses = value
        end
      end

      if attributes.key?(:'clinical_comments')
        self.clinical_comments = attributes[:'clinical_comments']
      end

      if attributes.key?(:'notes')
        if (value = attributes[:'notes']).is_a?(Array)
          self.notes = value
        end
      end

      if attributes.key?(:'clinical_info')
        if (value = attributes[:'clinical_info']).is_a?(Array)
          self.clinical_info = value
        end
      end

      if attributes.key?(:'results_status')
        self.results_status = attributes[:'results_status']
      end

      if attributes.key?(:'response_flag')
        self.response_flag = attributes[:'response_flag']
      end

      if attributes.key?(:'external_ids')
        if (value = attributes[:'external_ids']).is_a?(Array)
          self.external_ids = value
        end
      end

      if attributes.key?(:'results')
        if (value = attributes[:'results']).is_a?(Array)
          self.results = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["STATUS_UNKNOWN", "STATUS_UPDATE", "STATUS_CANCEL", "STATUS_RESULTED", "STATUS_NEW", "STATUS_REPORTED"])
      return false unless status_validator.valid?(@status)
      priority_validator = EnumAttributeValidator.new('String', ["PRIORITY_UNKNOWN", "PRIORITY_ASAP", "PRIORITY_ROUTINE", "PRIORITY_PREOPERATIVE", "PRIORITY_TIMING_CRITICAL", "PRIORITY_STAT"])
      return false unless priority_validator.valid?(@priority)
      results_status_validator = EnumAttributeValidator.new('String', ["UNAVAILABLE", "PRELIMINARY", "IN_PROCESS", "CORRECTED", "CANCELED", "FINAL"])
      return false unless results_status_validator.valid?(@results_status)
      response_flag_validator = EnumAttributeValidator.new('String', ["UNKNOWN", "EXCEPTIONS", "REPLACEMENTS", "ASSOCIATED_SEGMENTS", "CONFIRMATIONS", "ACKNOWLEDGEMENT"])
      return false unless response_flag_validator.valid?(@response_flag)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["STATUS_UNKNOWN", "STATUS_UPDATE", "STATUS_CANCEL", "STATUS_RESULTED", "STATUS_NEW", "STATUS_REPORTED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] priority Object to be assigned
    def priority=(priority)
      validator = EnumAttributeValidator.new('String', ["PRIORITY_UNKNOWN", "PRIORITY_ASAP", "PRIORITY_ROUTINE", "PRIORITY_PREOPERATIVE", "PRIORITY_TIMING_CRITICAL", "PRIORITY_STAT"])
      unless validator.valid?(priority)
        fail ArgumentError, "invalid value for \"priority\", must be one of #{validator.allowable_values}."
      end
      @priority = priority
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] results_status Object to be assigned
    def results_status=(results_status)
      validator = EnumAttributeValidator.new('String', ["UNAVAILABLE", "PRELIMINARY", "IN_PROCESS", "CORRECTED", "CANCELED", "FINAL"])
      unless validator.valid?(results_status)
        fail ArgumentError, "invalid value for \"results_status\", must be one of #{validator.allowable_values}."
      end
      @results_status = results_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] response_flag Object to be assigned
    def response_flag=(response_flag)
      validator = EnumAttributeValidator.new('String', ["UNKNOWN", "EXCEPTIONS", "REPLACEMENTS", "ASSOCIATED_SEGMENTS", "CONFIRMATIONS", "ACKNOWLEDGEMENT"])
      unless validator.valid?(response_flag)
        fail ArgumentError, "invalid value for \"response_flag\", must be one of #{validator.allowable_values}."
      end
      @response_flag = response_flag
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          application_order_id == o.application_order_id &&
          status == o.status &&
          transaction_date_time == o.transaction_date_time &&
          collection_date_time == o.collection_date_time &&
          collection_start_date_time == o.collection_start_date_time &&
          completion_date_time == o.completion_date_time &&
          expiration_date == o.expiration_date &&
          specimen == o.specimen &&
          medication_administrations == o.medication_administrations &&
          procedure == o.procedure &&
          ordering_provider == o.ordering_provider &&
          result_copy_providers == o.result_copy_providers &&
          ordering_facility == o.ordering_facility &&
          priority == o.priority &&
          diagnoses == o.diagnoses &&
          clinical_comments == o.clinical_comments &&
          notes == o.notes &&
          clinical_info == o.clinical_info &&
          results_status == o.results_status &&
          response_flag == o.response_flag &&
          external_ids == o.external_ids &&
          results == o.results
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, application_order_id, status, transaction_date_time, collection_date_time, collection_start_date_time, completion_date_time, expiration_date, specimen, medication_administrations, procedure, ordering_provider, result_copy_providers, ordering_facility, priority, diagnoses, clinical_comments, notes, clinical_info, results_status, response_flag, external_ids, results].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PrimaryConnectClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
